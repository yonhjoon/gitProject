package yomg_joom01;

public class A_A {
	//용어 정리
	
/*
 *String : 문자열 처리를 위하여 자바가 미리 만들어 놓은 클래스
 * 			(참조자료형 이지만 기본자료형 처럼 쓸 수 있다.)
 * 
 * 문자 : "h" "e" "l" "l" "o"
 * 
 * 문자열 : "hello" 문자열을 나타내는 자료형은 String 이다.
 * 
 * 메소드 : 클래스 안에있는 함수.
 * 
 * 바이트 : (정수) byte, shot , int , long, char, (여기부터 실수) float, double
 * 
 * char : 하나의 문자를 저장하기 위한 자료형
 * 
 * 복합 대입 연산자 : += , -= a를 b에 더해서 넣어라 빼서 넣어라
 * 
 * 관계 연산자 : n1 < n2 (n1이 n2보다 작은가) > (큰가)? (<=같거나 작냐) (>=같거나 크냐)
 * 
 *  논리 연산자 : && 무조건 true여야한다  || 둘중 하나만 맞아도된다  ! 부정
 * 
 * 
 * 
* 정수 : 소수점이없는 숫자 예- 1 2 3 4 5

* 실수 : 소수점이 있는 숫자 예 - 1.1 2.1 3.1 4.1 5.1
 
* 주소값 : 해당 데이터가 저장된 메모리의 시작 주소를 의미합니다.
* 
 
* 조건문 : 어떤 조건이 주어질 때 어떤 동작을 수행하도록 하는, 즉 주어진 조건의 만족 여부에 따라 선택적으로 실행하고자 할 때 사용되는 문장
 		( true / false ) ( 0 < 10 = true )
 		
 if : 조건문 - if문은 입력한 조건을 만족하는 경우에만 다음 문장을 수행하는 구문이다.
* if [조건] : 

    (수행할 코드)
    
	(x < y ) (x == y) (조건식)

 else : else의 뜻이 '그 밖의 다른'이므로 조건식의 결과가 참이 아닐 때, 
 		즉 거짓일 때 else블럭의 문장을 수행하라는 뜻이다.
 				
switch문: 단 하나의 조건식으로 많은 경우의 수를 처리할 때 switch문을 사용한다. 다만 switch문은 제약조건이 있기 때문에, 
		 경우의 수가 많아도 어쩔 수 없이 if문으로 작성해야 하는 경우가 있다.

 
* 참조문 :  var a = 1; / var b = a; / = a변수를  b변수 가 복제한다. 참조문 즉 a 의 데이터의 주소값을 b 가 복제하여 같은 주소값을 가르킨다.
 
* 변수 : 데이터를 저장할수있는 메모리공간 (하나의 공간을 저장할수있는 저장공간) 하나의 자료형의 하나의 값만을 보관할 수 있음 
 		(예를 들어, int형 데이터는 4바이트의 크기를 가지지만, int형 데이터의 주소값은 시작 주소 1바이트만을 가리킵니다.)
 
* 변수의 선언 : int n = 100;
 
* 참조변수 : 주소값을 가지고 메모리공간을 가르키는 아이 ( 리모콘 같은놈) 
 
* 일반변수 : 크기가 정해져있는 것
* 		ex) int 0 = 10;
* 
* 매게변수 : 매개변수 : 함수를 호출할 때 인수로 전달된 값을 함수 내부에서 사용할 수 있게 해주는 변수입니다. (헤당 메소드 내에서만 사용가능)
* 
* 지역변수 : { } 안에있는 변수
* 
* 재귀호출 : 함수안에있는 함수를 부른다 ( 이거는 사용하면 안된다 XXXX)
* 
* 구조체 : 여러개의 자료형의 여러개의 값들을 보관할 수 있다.
* 
* 자료형 : 실제 값을 갖는것이 아닌 데이터가 저장된 메모리의 “주소 값”을 가지는 자료형
* 
* 반복문 : 특정 문장들을 반복해서 수행하도록 함.
* 
* for : 반복문 - 대부분의 프로그래밍 언어에서는 반복되는 작업을 간단하게 처리하기 위해 
*		 반복문이라는 기능을 제공한다
*		(for(초기식; ㅈ조건식 ; 증감식)

(for) while : condition(조건)이 truthy 이면 반복문 본문의 코드가 실행됩니다.
		아래 반복문은 조건 i < 3을 만족할 동안 i를 출력해줍니다.
		
* do while : 조건에 따라 반복을 계속할지를 결정할 때 사용하는 것은 while 문과 동일합니다.
	 		다만, 무조건 중괄호 {} 블럭을 한번 실행하고, 조건을 검사하여 반복을 결정합니다.
	 var i = 1;
		do {    
			console.log(i)    
				i++
		} while(i <= 10);	

 break : 정한 경우에 for문을 종료시키고 싶다면 'break' 키워드를 사용하면 된다.
 
 continue : for문 내의 코드를 끝까지 수행하지 않고 곧바로 다음 반복으로 넘어가고 싶다면 
 			'continue' 키워드를 사용하면 된다.
* 
* 배열 : 하나의 자료형의 여러개의 값들을 보관할 수 있음
* 
* 1차원 배열 : 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간
* 			int[] ref = new int[5]  // 길이가 5인 int형 1차원 배열의 생성문
* 
* 얕은 복사 : 객체의 주소 값만 가져와 참조형 변수에 저장하고 하나의 객체를 두 변수가 참조하는 것
* 
* 깊은 복사 : 새로운 배열 객체를 생성하여 기존 배열의 데이터를 복사하는 것
* 

 

* 객체지향 언어 : "객체"를 "지향"하는 언어로 "객체중심"으로 돌아간다고 생각하면 된다.
* 
* 객체란 : 현실세계에 독립적으로 존재(목적이 있고 가치가 있고 의미가 있는 것) 하는 
* 			모든것들을 의미 (유형, 무형,개념,...)
* 		 현실세계에서는 객체들간의 상호작용으로 돌아감
* 		클래스에 따라 메모리상에 구현된 실체를 뜻합니다.
* 
* 객체배열 : 객체를 저장하는 배열로 배열의 자료형을 클래스명(사용자 정의 자료형)으로.
* 			 지정하여 활용
* 
* 클래스 : 각 객체들의 속성(데이터)들을 담아낼 그릇같은 존재이다.
* 		객체를 찍어내기 위한 틀, 설계도
* 
* 인스턴스 : 클래스에 따라 메모리상에 구현된 실체를 뜻합니다.
* 
* 데이터 : 프로그램상에서 유지하고 관리해야 할 데이터
* 
* 기능 : 데이터를 처리하고 조작하는 기능
 
* 필드 : 클래스의 데이터를 정의하는곳
* 
* 접근제한자 : 해당구조에 접근할 수 있는 범위를 제한한다.
* 
*  . (점) : 해당 객체에 접근할때 사용함
* 
* Public : 어디서든(같은패키지(폴더) 이거나 다른패키지) 접근이 가능하다.
* 
* protected : 같은 패키지에서만 또는 다른 패키지일경우 상속구조(부모자식 관계)에서만 접근가능하다.
* 
* default : 같은패키지에서만 접근 가능하다.
* 
* private : 클래스내에서만 가능하다.
* 
* getter : 해당필드에 값을 가지고오기위한 메소드
* 
* setter : 해당필드에 값을 대입시키기위한 메소드
* 
* 캡슐화 : 추상화를 통해서 정의된 속성들과 기능들을 하나로묶어 관리하는 기법중 하나로
* 		클래스에서 가장 중요한 목적인 "데이터의 접근제한(정보은닉)"을 원칙으로
* 		외부로부터의 "데이터의 접근을 막고"
* 		대신에 "데이터를 간접적으로 처리(값을 대입하거나 값을 돌려주거나)"
* 		할 메소드들을 클래스 내부에 작성해서 관리하는 것
* 
* 메소드 오버로딩 : 호출된 메소드를 찾을때 참조하게 되는 두 가지 정보
	-메소드 이름
	-메소드의 매게변수 정보
	 따라서 이 둘 중 하나의 형태가 다른 메소드를 정의하는 것이 가능하다.
* 
* 생성자 : 클래스와 똑같은 이름의 참조자
* 
* 함수 : 특정기능을 하나 만들어놓고 여러곳에 씀
*       (  public static void 같은 메인문)
* 
* void : 리턴값이 없다 반환하지 않는다
* 
* return :  값의 반환을 명령
* 			void는 값의 반환 없이 메소드만 종료
*
* public static int : 인트형 함수를 반환해야한다.
* 
* 
* public static double : 더블형 함수를 반환해야한다
* 
* this. : 인스턴스 자기 자신을 가리키는 키워드이다.
* 
* super : 부모를 가리키는 키워드.
* 
* Is a (상속관계) : 는 이다. 
* 
* Has a (포함관계) : 는 가지고있다.
* 
* static : 클래스에 고정되어 있는 변수나 메서드이기 때문입니다.
* 			별도의 메모리를 가지고있다. 그리고 클래스의 이름으로 구분한다.
  ALT(알트) + SHIFT(쉬프트) + S + O = 생성자만들어짐
  ALT(알트) + SHIFT(쉬프트) + S + S = 결과값 나옴
  ALT(알트) + SHIFT(쉬프트) + S + R = 겟셋(get) 나옴
* 
* 오버로딩 : 매게변수 객수, 자료형, 순서가 동일하게 작성하는것
* 
* 오버라이딩 : 자식클래스가 상속받고 있는 부모 클래스의 메소드를 재정의(재작성) 하는 것이다.
* 
* @Override 어노테이션 : 생략가능합니다, 크게상관없기떄문이다 ( 명시하지 않아도 된다. )
* ->> 부모 메소드나 매게변수가 수정될 경우 -> 찾아보기 쉽기때문이다.
* - >> 메소드가 오버라이딩한 메소드라는 사실을 직관적으로 알 수 있다.
* 
* 상속 : 다른 클래스가 가지고있는 멤버(필드,메소드) 들을 새로 작성할 클래스에서 직접 만들지 않고
* 		상속을 받음으로써 새 클래스가 자신의 멤버처럼 사용할 수 있는 기능
* 
* -목적 : 클래스의 재사용, 연관된 일련의 클래스들에 대한 공통적인 규약 정의
* 
* -장점 :1.보다 적은 양의 코드로 새로운 클래스 작성 가능
*       2.코드를 공통적으로 관리하기 떄문에 코드의 추가 및 변경 용이
*       3. 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여한다. 
*       
* 단일 상속 : 클래스간의 관계가 다중 상속보다 명확하고 신뢰성 있는 코드 작성
* 			자바에서는 다중 상속 미지원 -> 단일상속만 지원
* 
* 다중 상속 : 안씀 절대안씀
* 
* 다형성 : 여러 개의 형태를 갖는다. 상속을 이용한 기술로 부모타입으로부터 파생된 여러가지 
* 
* 
* 서버 : 뭔가를 요청을 받아서 그의 대한 응답을 주는거 (네이버 화면 줘 를 응답받아 네이버 화면을 줌)
* 
* 클라이언트 : 요청만 하는거 (네이버 화면 줘)
* 
* 업 캐스팅 : 상속 관계에 있는 부모,자식 클래스 간에 부모타입의 참조형 변수가 모든 
* 			자식타입의 객체 주소를 받을 수 있음
* 
* 다운 캐스팅 : 자식 객체의 주소를 받은 부모 참조형 변수를 가지고 자식의 멤버를 참조해야 할 경우
* 			 부모클래스 타입의 참조형 변수를 자식 클래스 타입으로 형 변환하는 것
* 			 자동으로 처리되지 않기 때문에 반드시 후손 타입 명시해서 형 변환
* 
* 추상 클래스 : 몸체 없는 메소드를 포함한 클래스 (추상 클래스일 경우 클래스 선언부에 abstract(어스트럭스) 키워드 사용한다.
* 
* 추상 메소드 : 몸체({}) 없는 메소드를 추상메소드라고한다.
* 
* 캡슐화 상속 다형서 3대특징 자바
* 
* 
* 
* 
* 
* 
* 
* 
*  *필드*
*  접근제한자  자료형  변수이름
* 
*  private   int    name;
*  
*  *생성자*
*  접근제한자 생성자명(매게변수) {초기화}
* 
*   public  OOO(int name)  { 
*   		this.name = name; 
* 
*  
*  *메소드*
*   접근제한자 (static)반환형  메소드이름(매게변수)  {메소드내용}
* 
* 	public  (static)void  set/get
* 		set : this.OOO
* 		get : return;
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
	 */

}
