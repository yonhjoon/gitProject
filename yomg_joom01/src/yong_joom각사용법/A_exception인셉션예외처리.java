package yong_joom각사용법;

public class A_exception인셉션예외처리 {
	/*
	 *  * 에러의 종류
	 *  - 시스템에러 : 컴퓨터의 오작동으로 발생하는 에러 => 소스코드로 해결이 안됨 => 심각한 에러 에 속함
	 *  - 컴파일에러 : 소스코드 문법상의 오류 => 빨간줄로 애초에 오류로 알려준다. (개발자의 실수) => 발견과 해결이 쉽다.
	 *  - 런타임에러 : 코드 상으로 문제가 없는데 프로그램 실행 중에 발생하는 에러이다.
	 *  		   (사용자의 실수일 수 있고 개발자가 예측 가능하지만 처리를 안해놓은 에러일수 있다)
	 *  - 논리에러  : 문법적으로도 문제없고 실행했을 때도 문제는 없지만 프로그램 의도와 맞지않는 동작이나 결과가 나타나는 에러이다.
	 *  
	 *  컴파일에러,런타임에러,논리에러 같은 개발자가 예측하여 수정할 수 있는 에러들을 가지고 작업
	 *  => 이런것들을 "예외" 라고 함!! => Exception 이라고 한다.
	 *  
	 *  - 예외처리 : "예외"가 "발생"했을 경우에 대해서 "처리"하는 방법을 "예외처리"라고 합니다
	 *  이런 "예외"가 "발생"했을 경우에 대해서 "처리"하는 방법을 "예외처리"라고 합니다!!
	 *  
	 *  * 예외처리를 하는 목적
	 *  - 예외처리를 하지않고 그대로 예외가 발생되는 경우 프로그램이 비 정상적으로 종료될 수 있음
	 *  
	 *  * 예외처리 방법
	 *  1. try ~ catch문을 이용하는 방법
	 *  2. throws를 이용한다.( 떠넘기기 == 위임한다(해당 에러를 호출한 곳으로))
	 *  
	 *  
	 *   try {
	 *  		예외가 발생할 수 있는 구문;
	 *   } catch(발생될 예외 클래스의 매개변수){
	 *   		해당 예외가 발생됐을 경우 실행할 구문;
	 *   }
	 *   
	 *   
	 *  	int num1,num2;
	 *		System.out.print("정수1 : ");
	 *		num1 = sc.nextInt();
	 *		
	 *		System.out.print("정수2 : ");
	 *		num2 = sc.nextInt();
	 *
	 *		int result = num1 / num2;
	 *   
	 *   	try {
	 *			int result = num1 / num2;
	 *			System.out.print("나누기 결과 : " + result);
	 *		} catch(ArithmeticException e) {
	 *			System.out.println("0 으로는 나눌 수 없습니다.");
	 * 			e.printStackTrace(); // 강제로 오류난 이력볼려할 때 실행하는 구문
	 *		}
	 *		System.out.println("프로그램을 종료합니다.");
	 *	  }
	 *   
	 */
}
	
	/*
	 *  RntimeException
	 *  - 프로그램 실행시 발생되는 예외들
	 *  
	 *  * RuntimeException후손들(자식클래스들)
	 *  - IndexOutOfBoundsException : 부적절한 인덱스를 가지고 접근시 발생되는 예외
	 *  - NullPointerException : 참조변수가 null로 초기화된 상태에서 해당 참조변수에 특정 변수나 메소드로 접근을 시도하면 발생되는 예외
	 *  - ClassCastException : 허용할 수 없는 형변환이 진행될때 발생되는 예외
	 *  - ArithmeticException : 나누기 연산시 0으로 나눠질 때 발생되는 예외
	 *  - 자주 나오는 에러들이다 몇몇가지는 더 있지만 자주 나오지않아 괜찮다.
	 *  - ArrayIndexOutOfBoundsException : 배열에 부적절한 인덱스로 제시하면서 접근했을 때 발생하는 에러 (배열의 값을 초과한것)
		- NegativeArraySizeException : 배열의 할당 과정에서 크기를 음수( - )로 지정하면 발생하는 예외
	 *  - CheckedException : 반드시 예외처를 해야되는 예외들
	 *  => RuntimeException 관련된 예외는 충분히 예측가능한 상황이 있다.
	 *  
	 *  
	 *  1. try ~ catch문 : 여기 이자리에서 곧바로 예외를 처리하겠다.
	 *  2. try{} : 예외가 발생할 가능성이 있는 코드를 작성하는것
	 *  3. catch(발생될 예외클래스의 매개변수를 넣어준다) {} : try구문내에서 예외가 발생했을 경우 어떻게 처리할지를 정의한다.
	 *	4. throws : 지금 이자리에서 예외를 처리하지않고 현재 이 메소드를 호출한 곳으로 예외처리를 떠넘기겠다.
	 *
	 *	
	 *  
	 */
